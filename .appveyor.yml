version: 0.1.{build}-{branch}
clone_folder: C:\projects\gpu_pandora_GS
platform: x64
configuration: Release

environment:
  matrix:
  # Clang10-LLVM x86_64 / C++17
  - TOOLCHAIN: "Visual Studio 2019 Clang/LLVM 11.0.0"
    PACKAGE_ID: clang11_x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    APPVEYOR_JOB_NAME: clangcl-ninja
    BUILD_TYPE: Debug
    CMAKE_ARGS: -DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_CXX_COMPILER=clang-cl.exe -DCWORK_WINDOWS_VERSION="10" -DCWORK_OPENGL4_VERSION="46" -DCWORK_D3D11_VERSION="114"
    GENERATOR: Ninja
    VCVARS: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat
    VCVARSARG: x86
    PATH: C:\Program Files\LLVM\bin;C:\msys64\mingw64\bin;%PATH%;C:\Windows\System32
    LIB_SUFFIX: C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\architecture;C:\Program Files (x86)\Windows Kits\10\bin\architecture\ucrt;C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\x64
    PACMAN_PACKAGES: "mingw-w64-i686-ninja"
    CLANG_URL: https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/LLVM-11.0.0-win32.exe

  # MSVC-VS2019 x86 / C++17 - Windows 10+
  - TOOLCHAIN: "Visual Studio 2019"
    PACKAGE_ID: vs2019_x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    APPVEYOR_JOB_NAME: msvc-vs2019-w10
    BUILD_TYPE: Release
    CMAKE_ARGS: -A Win32 -DCWORK_WINDOWS_VERSION="10" -DCWORK_OPENGL4_VERSION="46" -DCWORK_D3D11_VERSION="114"
    GENERATOR: Visual Studio 16 2019
    VCVARS: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat
    VCVARSARG: x86
  
  # MSVC-VS2017 x86_64 / C++14 - Windows 7
  - TOOLCHAIN: "Visual Studio 2017"
    PACKAGE_ID: vs2017_x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    APPVEYOR_JOB_NAME: msvc-vs2017-w7
    BUILD_TYPE: Debug
    CMAKE_ARGS: -A Win32 -DCWORK_CPP_REVISION="14" -DCWORK_WINDOWS_VERSION="7" -DCWORK_OPENGL4_VERSION="41" -DCWORK_D3D11_VERSION="110"
    GENERATOR: Visual Studio 15 2017
    VCVARS: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat
    VCVARSARG: x86

install:
  # ---- set environment ----
  - if defined VCVARS call "%VCVARS%" %VCVARSARG%
  - set PATH=C:\Python38-x64;C:\Python38-x64\Scripts;%APPVEYOR_BUILD_FOLDER%\deps\bin;%PATH%
 
  # ---- Pacman packages install ----
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc ""
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc "yes | pacman -Rd --noconfirm mingw-w64-i686-gcc-ada mingw-w64-x86_64-gcc-ada mingw-w64-i686-gcc-objc mingw-w64-x86_64-gcc-objc"
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -Suy" & exit 0
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -Suy" & exit 0
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -Suy" & exit 0
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc "pacman --noconfirm -Suy"
  - if defined PACMAN_PACKAGES C:\msys64\usr\bin\bash.exe -lc "for i in {1..3}; do pacman --noconfirm -S %PACMAN_PACKAGES% && break || sleep 15 ; done"
  # ---- Clang install ----
  - if defined CLANG_URL if not exist C:\llvm-installer.exe appveyor-retry appveyor DownloadFile %CLANG_URL% -FileName C:\llvm-installer.exe
  - if defined CLANG_URL START /WAIT C:\llvm-installer.exe /S /D=C:\"Program Files\LLVM"
 
  # ---- set libraries + remove git from path (conflicts with cmake) ----
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - if defined INCLUDE_PREFIX set INCLUDE=%INCLUDE_PREFIX%;%INCLUDE%
  - if defined LIB_PREFIX set LIB=%LIB_PREFIX%;%LIB%
  - if defined LIB_PREFIX set PATH=%LIB_PREFIX%;%PATH%
  - if defined LIB_SUFFIX set LIB=%LIB%;%LIB_SUFFIX%
  - if defined LIB_SUFFIX set PATH=%PATH%;%LIB_SUFFIX%

build_script:
  # ---- project version + build directory ----
  - cd C:\projects\gpu_pandora_GS
  - call _scripts/update_version.bat
  - mkdir _build
  - cd _build
  - mkdir %PACKAGE_ID%
  - cd ..
  # ---- cmake generation + build ----
  - cmake -S . -B ./_build/%PACKAGE_ID% -G"%GENERATOR%" %CMAKE_ARGS% || (echo CMAKEERROR && echo CMAKEOUTPUT && exit 1)
  - cmake --build ./_build/%PACKAGE_ID% --config %BUILD_TYPE% --target install

test_script:
  # ---- unit testing ----
  - cd C:\projects\gpu_pandora_GS\_build\%PACKAGE_ID%
  - ctest --output-on-failure
